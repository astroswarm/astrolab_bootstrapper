---
- hosts: all
  tasks:
    - name: Install status setter
      copy:
        src: files/set-status.sh
        dest: /usr/local/bin/set-status.sh
        mode: 0755
        owner: root
        group: staff
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Installing updater script"
    - name: Install Astrolab updater script
      copy:
        src: files/update-astrolab
        dest: /usr/local/bin/update-astrolab
        mode: 0755
        owner: root
        group: staff
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Updating apt repositories"
    - apt:
        update_cache: true
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Installing ntp"
    - apt:
        name: ntp
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Configuring wpa_supplicant template"
    - name: Prepare wpa_supplicant for wifi connectivity.
      copy:
        src: files/wpa_supplicant.conf
        dest: /etc/wpa_supplicant/wpa_supplicant.conf
        force: false
        mode: 0600
        owner: root
        group: root
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Setting hostname"
    - name: Set the hostname
      copy:
        src: files/hostname
        dest: /etc/hostname
        mode: 0644
        owner: root
        group: root
      become: true
    - shell: /usr/local/bin/set-status.sh "Updating /etc/hosts with hostname"
    - name: Update /etc/hosts with the hostname
      copy:
        src: files/hosts
        dest: /etc/hosts
        mode: 0644
        owner: root
        group: root
      become: true

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Installing prerequisites for QHYCCD SDK"
    - name: Install build prerequisites
      apt:
        name: "{{item}}"
      with_items:
        - build-essential
        - cmake
        - git
      become: true
    - shell: /usr/local/bin/set-status.sh "Downloading QHYCCD SDK"
    - name: Download QHYCCD SDK
      git:
        repo: https://github.com/astroswarm/QHYCCD_Linux.git
        dest: /tmp/QHYCCD_Linux
        version: origin/rg-qhy5-loader
    - shell: /usr/local/bin/set-status.sh "Installing QHYCCD SDK"
    - name: Install QHYCCD SDK (includes udev rules)
      become: true
      shell: "cmake . && make install"
      args:
        chdir: /tmp/QHYCCD_Linux

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Installing Docker"
    - name: Install docker
      shell: curl -sSL https://get.docker.com/ | sh || dpkg --configure -a
      become: true
    - shell: /usr/local/bin/set-status.sh "Configuring Docker logging"
    - name: Configure docker logging
      copy:
        src: files/daemon.json
        dest: /etc/docker/daemon.json
        mode: 0644
        owner: root
        group: root
      become: true
    - shell: /usr/local/bin/set-status.sh "Creating docker group"
    - group:
        name: docker
        state: present
      become: true
    - shell: /usr/local/bin/set-status.sh "Adding groups to pi user for Docker privileges"
    - user: # Groups differ between x64 and Raspberry Pi (Arm)
        append: true
        name: "{{ansible_user}}"
        groups: docker,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev
      become: true
      when: ansible_architecture == "x86_64"
    - user:
        append: true
        name: "{{ansible_user}}"
        groups: docker,pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio
      become: true
      when: ansible_architecture == "armv7l"

- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Creating expose_lan_ip_address service"
  roles:
    - role: tumf.systemd-service
      systemd_service_name: expose_lan_ip_address
      systemd_service_Unit_Description: Write LAN IP address to a file that containers can read
      systemd_service_Service_ExecStart: /bin/sh -c "/sbin/ip route get 1 | /usr/bin/awk '{print $NF;exit}' | /usr/bin/xargs /bin/echo -n > /host-data/lan_ip_address"
      systemd_service_Service_Restart: always
      systemd_service_Service_RestartSec: 60

- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Installing shellinabox"
    - apt:
        name: shellinabox
# Stop default shellinabox service
- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Stopping default shellinabox service"
    - service:
        name: shellinabox
        enabled: false
        state: stopped

# Create our custom shellinabox service
- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Creating web_shell service"
  roles:
    - role: tumf.systemd-service
      systemd_service_name: web_shell
      systemd_service_Unit_Description: Provide a web-based shell interface to the box
      systemd_service_Service_ExecStart: /usr/bin/shellinaboxd -v -t -p 4200
      systemd_service_Service_Restart: on-failure

# Run our custom shellinabox service
- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Launching web_shell service"
    - service:
        name: web_shell
        enabled: true
        state: started

- hosts: all
  become: true
  tasks:
    - shell: /usr/local/bin/set-status.sh "Creating shared area for host data"
    - name: Create shared area for host-data
      file:
        path: /host-data
        owner: "{{ansible_user}}"
        group: "{{ansible_user}}"
        recurse: true
        state: directory
    - shell: /usr/local/bin/set-status.sh "Creating shared area for portainer state"
    - name: Create shared area for portainer state
      file:
        path: /mnt/shared/portainer/data
        group: "{{ansible_user}}"
        owner: "{{ansible_user}}"
        recurse: true
        state: directory
    - shell: /usr/local/bin/set-status.sh "Installing ip-route"
    - name: Install "ip route"
      apt:
        name: iproute2
      become: true
    - shell: /usr/local/bin/set-status.sh "Installing easy_install"
    - name: Install easy_install
      apt:
        name: python-setuptools
      become: true
    - shell: /usr/local/bin/set-status.sh "Installing pip"
    - name: Install pip
      become: true
      shell: "easy_install pip"
    - shell: /usr/local/bin/set-status.sh "Installing docker-compose"
    - name: Install docker-compose
      pip:
        name: docker-compose

- hosts: all
  tasks:
    - shell: /usr/local/bin/set-status.sh "Downloading Astrolab workspace"
    - name: Download Astrolab
      git:
        repo: https://github.com/astroswarm/astrolab.git
        dest: /usr/local/astrolab
      become: true
    - shell: /usr/local/bin/set-status.sh "Downloading Astrolab containers"
    - name: Download Astrolab containers
      shell: . ./production.sh && /usr/local/bin/docker-compose pull
      args:
        chdir: /usr/local/astrolab
    - shell: /usr/local/bin/set-status.sh "Launching Astrolab containers"
    - name: Run Astrolab containers
      shell: . ./production.sh && /usr/local/bin/docker-compose up -d --build
      args:
        chdir: /usr/local/astrolab
